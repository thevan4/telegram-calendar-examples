// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: telegram-calendar-examples/standalone_service/telegram_calendar.proto

package telegram_calendar

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateCalendarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallbackPayload string `protobuf:"bytes,1,opt,name=callback_payload,json=callbackPayload,proto3" json:"callback_payload,omitempty"` // A calendar payload that may be empty at first startup. The system automatically generates payloads in response. For example: 'calendar/prm_00.07.2023'.
	// RFC3339.
	CurrentTime string `protobuf:"bytes,2,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"` // Current time with timezone. In case of any errors (incorrect payload, internal failure, etc.) the calendar is generated for the date specified by the current date in the request.
}

func (x *GenerateCalendarRequest) Reset() {
	*x = GenerateCalendarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCalendarRequest) ProtoMessage() {}

func (x *GenerateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCalendarRequest.ProtoReflect.Descriptor instead.
func (*GenerateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateCalendarRequest) GetCallbackPayload() string {
	if x != nil {
		return x.CallbackPayload
	}
	return ""
}

func (x *GenerateCalendarRequest) GetCurrentTime() string {
	if x != nil {
		return x.CurrentTime
	}
	return ""
}

type GenerateCalendarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InlineKeyboardMarkup *InlineKeyboardMarkup  `protobuf:"bytes,1,opt,name=inline_keyboard_markup,json=inlineKeyboardMarkup,proto3" json:"inline_keyboard_markup,omitempty"` // A message that fully complies with the documentation https://core.telegram.org/bots/api reply_markup (InlineKeyboardMarkup)
	SelectedDay          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=selected_day,json=selectedDay,proto3,oneof" json:"selected_day,omitempty"`                        // User-selected day
	IsUnselectableDay    *bool                  `protobuf:"varint,3,opt,name=is_unselectable_day,json=isUnselectableDay,proto3,oneof" json:"is_unselectable_day,omitempty"`   // Shows if the selected day was unavailable for selection
}

func (x *GenerateCalendarResponse) Reset() {
	*x = GenerateCalendarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCalendarResponse) ProtoMessage() {}

func (x *GenerateCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCalendarResponse.ProtoReflect.Descriptor instead.
func (*GenerateCalendarResponse) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateCalendarResponse) GetInlineKeyboardMarkup() *InlineKeyboardMarkup {
	if x != nil {
		return x.InlineKeyboardMarkup
	}
	return nil
}

func (x *GenerateCalendarResponse) GetSelectedDay() *timestamppb.Timestamp {
	if x != nil {
		return x.SelectedDay
	}
	return nil
}

func (x *GenerateCalendarResponse) GetIsUnselectableDay() bool {
	if x != nil && x.IsUnselectableDay != nil {
		return *x.IsUnselectableDay
	}
	return false
}

type InlineKeyboardMarkup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InlineKeyboard []*InlineKeyboardMarkup_InlineKeyboardRow `protobuf:"bytes,1,rep,name=inline_keyboard,json=inlineKeyboard,proto3" json:"inline_keyboard,omitempty"`
}

func (x *InlineKeyboardMarkup) Reset() {
	*x = InlineKeyboardMarkup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineKeyboardMarkup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineKeyboardMarkup) ProtoMessage() {}

func (x *InlineKeyboardMarkup) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineKeyboardMarkup.ProtoReflect.Descriptor instead.
func (*InlineKeyboardMarkup) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{2}
}

func (x *InlineKeyboardMarkup) GetInlineKeyboard() []*InlineKeyboardMarkup_InlineKeyboardRow {
	if x != nil {
		return x.InlineKeyboard
	}
	return nil
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearsBackForChoose       int64    `protobuf:"varint,1,opt,name=years_back_for_choose,json=yearsBackForChoose,proto3" json:"years_back_for_choose,omitempty"`
	YearsForwardForChoose    int64    `protobuf:"varint,2,opt,name=years_forward_for_choose,json=yearsForwardForChoose,proto3" json:"years_forward_for_choose,omitempty"`
	SumYearsForChoose        int64    `protobuf:"varint,3,opt,name=sum_years_for_choose,json=sumYearsForChoose,proto3" json:"sum_years_for_choose,omitempty"`
	DaysNames                []string `protobuf:"bytes,4,rep,name=days_names,json=daysNames,proto3" json:"days_names,omitempty"`
	MonthNames               []string `protobuf:"bytes,5,rep,name=month_names,json=monthNames,proto3" json:"month_names,omitempty"`
	HomeButtonForBeauty      string   `protobuf:"bytes,6,opt,name=home_button_for_beauty,json=homeButtonForBeauty,proto3" json:"home_button_for_beauty,omitempty"`
	PrefixForCurrentDay      string   `protobuf:"bytes,7,opt,name=prefix_for_current_day,json=prefixForCurrentDay,proto3" json:"prefix_for_current_day,omitempty"`
	PostfixForCurrentDay     string   `protobuf:"bytes,8,opt,name=postfix_for_current_day,json=postfixForCurrentDay,proto3" json:"postfix_for_current_day,omitempty"`
	PrefixForNonSelectedDay  string   `protobuf:"bytes,9,opt,name=prefix_for_non_selected_day,json=prefixForNonSelectedDay,proto3" json:"prefix_for_non_selected_day,omitempty"`
	PostfixForNonSelectedDay string   `protobuf:"bytes,10,opt,name=postfix_for_non_selected_day,json=postfixForNonSelectedDay,proto3" json:"postfix_for_non_selected_day,omitempty"`
	PrefixForPickDay         string   `protobuf:"bytes,11,opt,name=prefix_for_pick_day,json=prefixForPickDay,proto3" json:"prefix_for_pick_day,omitempty"`
	PostfixForPickDay        string   `protobuf:"bytes,12,opt,name=postfix_for_pick_day,json=postfixForPickDay,proto3" json:"postfix_for_pick_day,omitempty"`
	// RFC3339.
	UnselectableDaysBeforeTime string `protobuf:"bytes,13,opt,name=unselectable_days_before_time,json=unselectableDaysBeforeTime,proto3" json:"unselectable_days_before_time,omitempty"`
	// RFC3339.
	UnselectableDaysAfterTime string                    `protobuf:"bytes,14,opt,name=unselectable_days_after_time,json=unselectableDaysAfterTime,proto3" json:"unselectable_days_after_time,omitempty"`
	UnselectableDays          map[string]*emptypb.Empty `protobuf:"bytes,15,rep,name=unselectable_days,json=unselectableDays,proto3" json:"unselectable_days,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Format IANA (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones column TZ identifier.
	// More information https://data.iana.org/time-zones/tz-link.html
	Timezone string `protobuf:"bytes,16,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{3}
}

func (x *GetSettingsResponse) GetYearsBackForChoose() int64 {
	if x != nil {
		return x.YearsBackForChoose
	}
	return 0
}

func (x *GetSettingsResponse) GetYearsForwardForChoose() int64 {
	if x != nil {
		return x.YearsForwardForChoose
	}
	return 0
}

func (x *GetSettingsResponse) GetSumYearsForChoose() int64 {
	if x != nil {
		return x.SumYearsForChoose
	}
	return 0
}

func (x *GetSettingsResponse) GetDaysNames() []string {
	if x != nil {
		return x.DaysNames
	}
	return nil
}

func (x *GetSettingsResponse) GetMonthNames() []string {
	if x != nil {
		return x.MonthNames
	}
	return nil
}

func (x *GetSettingsResponse) GetHomeButtonForBeauty() string {
	if x != nil {
		return x.HomeButtonForBeauty
	}
	return ""
}

func (x *GetSettingsResponse) GetPrefixForCurrentDay() string {
	if x != nil {
		return x.PrefixForCurrentDay
	}
	return ""
}

func (x *GetSettingsResponse) GetPostfixForCurrentDay() string {
	if x != nil {
		return x.PostfixForCurrentDay
	}
	return ""
}

func (x *GetSettingsResponse) GetPrefixForNonSelectedDay() string {
	if x != nil {
		return x.PrefixForNonSelectedDay
	}
	return ""
}

func (x *GetSettingsResponse) GetPostfixForNonSelectedDay() string {
	if x != nil {
		return x.PostfixForNonSelectedDay
	}
	return ""
}

func (x *GetSettingsResponse) GetPrefixForPickDay() string {
	if x != nil {
		return x.PrefixForPickDay
	}
	return ""
}

func (x *GetSettingsResponse) GetPostfixForPickDay() string {
	if x != nil {
		return x.PostfixForPickDay
	}
	return ""
}

func (x *GetSettingsResponse) GetUnselectableDaysBeforeTime() string {
	if x != nil {
		return x.UnselectableDaysBeforeTime
	}
	return ""
}

func (x *GetSettingsResponse) GetUnselectableDaysAfterTime() string {
	if x != nil {
		return x.UnselectableDaysAfterTime
	}
	return ""
}

func (x *GetSettingsResponse) GetUnselectableDays() map[string]*emptypb.Empty {
	if x != nil {
		return x.UnselectableDays
	}
	return nil
}

func (x *GetSettingsResponse) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type NewSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearsBackForChoose         *NewSettingsRequest_YearsBackForChoose         `protobuf:"bytes,1,opt,name=years_back_for_choose,json=yearsBackForChoose,proto3" json:"years_back_for_choose,omitempty"`
	YearsForwardForChoose      *NewSettingsRequest_YearsForwardForChoose      `protobuf:"bytes,2,opt,name=years_forward_for_choose,json=yearsForwardForChoose,proto3" json:"years_forward_for_choose,omitempty"`
	DayNames                   *NewSettingsRequest_DayNames                   `protobuf:"bytes,3,opt,name=day_names,json=dayNames,proto3" json:"day_names,omitempty"`
	MonthNames                 *NewSettingsRequest_MonthNames                 `protobuf:"bytes,4,opt,name=month_names,json=monthNames,proto3" json:"month_names,omitempty"`
	HomeButtonForBeauty        *NewSettingsRequest_HomeButtonForBeauty        `protobuf:"bytes,5,opt,name=home_button_for_beauty,json=homeButtonForBeauty,proto3" json:"home_button_for_beauty,omitempty"`
	PrefixForCurrentDay        *NewSettingsRequest_PrefixForCurrentDay        `protobuf:"bytes,6,opt,name=prefix_for_current_day,json=prefixForCurrentDay,proto3" json:"prefix_for_current_day,omitempty"`
	PostfixForCurrentDay       *NewSettingsRequest_PostfixForCurrentDay       `protobuf:"bytes,7,opt,name=postfix_for_current_day,json=postfixForCurrentDay,proto3" json:"postfix_for_current_day,omitempty"`
	PrefixForNonSelectedDay    *NewSettingsRequest_PrefixForNonSelectedDay    `protobuf:"bytes,8,opt,name=prefix_for_non_selected_day,json=prefixForNonSelectedDay,proto3" json:"prefix_for_non_selected_day,omitempty"`
	PostfixForNonSelectedDay   *NewSettingsRequest_PostfixForNonSelectedDay   `protobuf:"bytes,9,opt,name=postfix_for_non_selected_day,json=postfixForNonSelectedDay,proto3" json:"postfix_for_non_selected_day,omitempty"`
	PrefixForPickDay           *NewSettingsRequest_PrefixForPickDay           `protobuf:"bytes,10,opt,name=prefix_for_pick_day,json=prefixForPickDay,proto3" json:"prefix_for_pick_day,omitempty"`
	PostfixForPickDay          *NewSettingsRequest_PostfixForPickDay          `protobuf:"bytes,11,opt,name=postfix_for_pick_day,json=postfixForPickDay,proto3" json:"postfix_for_pick_day,omitempty"`
	UnselectableDaysBeforeTime *NewSettingsRequest_UnselectableDaysBeforeTime `protobuf:"bytes,12,opt,name=unselectable_days_before_time,json=unselectableDaysBeforeTime,proto3" json:"unselectable_days_before_time,omitempty"`
	UnselectableDaysAfterTime  *NewSettingsRequest_UnselectableDaysAfterTime  `protobuf:"bytes,13,opt,name=unselectable_days_after_time,json=unselectableDaysAfterTime,proto3" json:"unselectable_days_after_time,omitempty"`
	UnselectableDays           *NewSettingsRequest_UnselectableDays           `protobuf:"bytes,14,opt,name=unselectable_days,json=unselectableDays,proto3" json:"unselectable_days,omitempty"`
	Timezone                   *NewSettingsRequest_Timezone                   `protobuf:"bytes,15,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *NewSettingsRequest) Reset() {
	*x = NewSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest) ProtoMessage() {}

func (x *NewSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4}
}

func (x *NewSettingsRequest) GetYearsBackForChoose() *NewSettingsRequest_YearsBackForChoose {
	if x != nil {
		return x.YearsBackForChoose
	}
	return nil
}

func (x *NewSettingsRequest) GetYearsForwardForChoose() *NewSettingsRequest_YearsForwardForChoose {
	if x != nil {
		return x.YearsForwardForChoose
	}
	return nil
}

func (x *NewSettingsRequest) GetDayNames() *NewSettingsRequest_DayNames {
	if x != nil {
		return x.DayNames
	}
	return nil
}

func (x *NewSettingsRequest) GetMonthNames() *NewSettingsRequest_MonthNames {
	if x != nil {
		return x.MonthNames
	}
	return nil
}

func (x *NewSettingsRequest) GetHomeButtonForBeauty() *NewSettingsRequest_HomeButtonForBeauty {
	if x != nil {
		return x.HomeButtonForBeauty
	}
	return nil
}

func (x *NewSettingsRequest) GetPrefixForCurrentDay() *NewSettingsRequest_PrefixForCurrentDay {
	if x != nil {
		return x.PrefixForCurrentDay
	}
	return nil
}

func (x *NewSettingsRequest) GetPostfixForCurrentDay() *NewSettingsRequest_PostfixForCurrentDay {
	if x != nil {
		return x.PostfixForCurrentDay
	}
	return nil
}

func (x *NewSettingsRequest) GetPrefixForNonSelectedDay() *NewSettingsRequest_PrefixForNonSelectedDay {
	if x != nil {
		return x.PrefixForNonSelectedDay
	}
	return nil
}

func (x *NewSettingsRequest) GetPostfixForNonSelectedDay() *NewSettingsRequest_PostfixForNonSelectedDay {
	if x != nil {
		return x.PostfixForNonSelectedDay
	}
	return nil
}

func (x *NewSettingsRequest) GetPrefixForPickDay() *NewSettingsRequest_PrefixForPickDay {
	if x != nil {
		return x.PrefixForPickDay
	}
	return nil
}

func (x *NewSettingsRequest) GetPostfixForPickDay() *NewSettingsRequest_PostfixForPickDay {
	if x != nil {
		return x.PostfixForPickDay
	}
	return nil
}

func (x *NewSettingsRequest) GetUnselectableDaysBeforeTime() *NewSettingsRequest_UnselectableDaysBeforeTime {
	if x != nil {
		return x.UnselectableDaysBeforeTime
	}
	return nil
}

func (x *NewSettingsRequest) GetUnselectableDaysAfterTime() *NewSettingsRequest_UnselectableDaysAfterTime {
	if x != nil {
		return x.UnselectableDaysAfterTime
	}
	return nil
}

func (x *NewSettingsRequest) GetUnselectableDays() *NewSettingsRequest_UnselectableDays {
	if x != nil {
		return x.UnselectableDays
	}
	return nil
}

func (x *NewSettingsRequest) GetTimezone() *NewSettingsRequest_Timezone {
	if x != nil {
		return x.Timezone
	}
	return nil
}

type InlineKeyboardMarkup_InlineKeyboardRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buttons []*InlineKeyboardMarkup_InlineKeyboardButton `protobuf:"bytes,1,rep,name=buttons,proto3" json:"buttons,omitempty"`
}

func (x *InlineKeyboardMarkup_InlineKeyboardRow) Reset() {
	*x = InlineKeyboardMarkup_InlineKeyboardRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineKeyboardMarkup_InlineKeyboardRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineKeyboardMarkup_InlineKeyboardRow) ProtoMessage() {}

func (x *InlineKeyboardMarkup_InlineKeyboardRow) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineKeyboardMarkup_InlineKeyboardRow.ProtoReflect.Descriptor instead.
func (*InlineKeyboardMarkup_InlineKeyboardRow) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{2, 0}
}

func (x *InlineKeyboardMarkup_InlineKeyboardRow) GetButtons() []*InlineKeyboardMarkup_InlineKeyboardButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

type InlineKeyboardMarkup_InlineKeyboardButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	CallbackData string `protobuf:"bytes,2,opt,name=callback_data,json=callbackData,proto3" json:"callback_data,omitempty"`
}

func (x *InlineKeyboardMarkup_InlineKeyboardButton) Reset() {
	*x = InlineKeyboardMarkup_InlineKeyboardButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineKeyboardMarkup_InlineKeyboardButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineKeyboardMarkup_InlineKeyboardButton) ProtoMessage() {}

func (x *InlineKeyboardMarkup_InlineKeyboardButton) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineKeyboardMarkup_InlineKeyboardButton.ProtoReflect.Descriptor instead.
func (*InlineKeyboardMarkup_InlineKeyboardButton) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{2, 1}
}

func (x *InlineKeyboardMarkup_InlineKeyboardButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InlineKeyboardMarkup_InlineKeyboardButton) GetCallbackData() string {
	if x != nil {
		return x.CallbackData
	}
	return ""
}

type NewSettingsRequest_YearsBackForChoose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearsBackForChoose int64 `protobuf:"varint,1,opt,name=years_back_for_choose,json=yearsBackForChoose,proto3" json:"years_back_for_choose,omitempty"`
	ForceChoice        bool  `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_YearsBackForChoose) Reset() {
	*x = NewSettingsRequest_YearsBackForChoose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_YearsBackForChoose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_YearsBackForChoose) ProtoMessage() {}

func (x *NewSettingsRequest_YearsBackForChoose) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_YearsBackForChoose.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_YearsBackForChoose) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NewSettingsRequest_YearsBackForChoose) GetYearsBackForChoose() int64 {
	if x != nil {
		return x.YearsBackForChoose
	}
	return 0
}

func (x *NewSettingsRequest_YearsBackForChoose) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_YearsForwardForChoose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YearsForwardForChoose int64 `protobuf:"varint,1,opt,name=years_forward_for_choose,json=yearsForwardForChoose,proto3" json:"years_forward_for_choose,omitempty"`
	ForceChoice           bool  `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_YearsForwardForChoose) Reset() {
	*x = NewSettingsRequest_YearsForwardForChoose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_YearsForwardForChoose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_YearsForwardForChoose) ProtoMessage() {}

func (x *NewSettingsRequest_YearsForwardForChoose) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_YearsForwardForChoose.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_YearsForwardForChoose) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 1}
}

func (x *NewSettingsRequest_YearsForwardForChoose) GetYearsForwardForChoose() int64 {
	if x != nil {
		return x.YearsForwardForChoose
	}
	return 0
}

func (x *NewSettingsRequest_YearsForwardForChoose) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_DayNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayNames    []*NewSettingsRequest_DayName `protobuf:"bytes,1,rep,name=day_names,json=dayNames,proto3" json:"day_names,omitempty"` // if set, expect 7 days
	ForceChoice bool                          `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_DayNames) Reset() {
	*x = NewSettingsRequest_DayNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_DayNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_DayNames) ProtoMessage() {}

func (x *NewSettingsRequest_DayNames) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_DayNames.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_DayNames) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 2}
}

func (x *NewSettingsRequest_DayNames) GetDayNames() []*NewSettingsRequest_DayName {
	if x != nil {
		return x.DayNames
	}
	return nil
}

func (x *NewSettingsRequest_DayNames) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_DayName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayName string `protobuf:"bytes,1,opt,name=day_name,json=dayName,proto3" json:"day_name,omitempty"`
}

func (x *NewSettingsRequest_DayName) Reset() {
	*x = NewSettingsRequest_DayName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_DayName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_DayName) ProtoMessage() {}

func (x *NewSettingsRequest_DayName) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_DayName.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_DayName) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 3}
}

func (x *NewSettingsRequest_DayName) GetDayName() string {
	if x != nil {
		return x.DayName
	}
	return ""
}

type NewSettingsRequest_MonthNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthNames  []*NewSettingsRequest_MonthName `protobuf:"bytes,1,rep,name=month_names,json=monthNames,proto3" json:"month_names,omitempty"` // if set, expect 12 months
	ForceChoice bool                            `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_MonthNames) Reset() {
	*x = NewSettingsRequest_MonthNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_MonthNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_MonthNames) ProtoMessage() {}

func (x *NewSettingsRequest_MonthNames) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_MonthNames.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_MonthNames) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 4}
}

func (x *NewSettingsRequest_MonthNames) GetMonthNames() []*NewSettingsRequest_MonthName {
	if x != nil {
		return x.MonthNames
	}
	return nil
}

func (x *NewSettingsRequest_MonthNames) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_MonthName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthName string `protobuf:"bytes,1,opt,name=month_name,json=monthName,proto3" json:"month_name,omitempty"`
}

func (x *NewSettingsRequest_MonthName) Reset() {
	*x = NewSettingsRequest_MonthName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_MonthName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_MonthName) ProtoMessage() {}

func (x *NewSettingsRequest_MonthName) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_MonthName.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_MonthName) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 5}
}

func (x *NewSettingsRequest_MonthName) GetMonthName() string {
	if x != nil {
		return x.MonthName
	}
	return ""
}

type NewSettingsRequest_HomeButtonForBeauty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeButtonForBeauty string `protobuf:"bytes,1,opt,name=home_button_for_beauty,json=homeButtonForBeauty,proto3" json:"home_button_for_beauty,omitempty"`
	ForceChoice         bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_HomeButtonForBeauty) Reset() {
	*x = NewSettingsRequest_HomeButtonForBeauty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_HomeButtonForBeauty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_HomeButtonForBeauty) ProtoMessage() {}

func (x *NewSettingsRequest_HomeButtonForBeauty) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_HomeButtonForBeauty.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_HomeButtonForBeauty) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 6}
}

func (x *NewSettingsRequest_HomeButtonForBeauty) GetHomeButtonForBeauty() string {
	if x != nil {
		return x.HomeButtonForBeauty
	}
	return ""
}

func (x *NewSettingsRequest_HomeButtonForBeauty) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_PrefixForCurrentDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixForCurrentDay string `protobuf:"bytes,1,opt,name=prefix_for_current_day,json=prefixForCurrentDay,proto3" json:"prefix_for_current_day,omitempty"`
	ForceChoice         bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_PrefixForCurrentDay) Reset() {
	*x = NewSettingsRequest_PrefixForCurrentDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_PrefixForCurrentDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_PrefixForCurrentDay) ProtoMessage() {}

func (x *NewSettingsRequest_PrefixForCurrentDay) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_PrefixForCurrentDay.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_PrefixForCurrentDay) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 7}
}

func (x *NewSettingsRequest_PrefixForCurrentDay) GetPrefixForCurrentDay() string {
	if x != nil {
		return x.PrefixForCurrentDay
	}
	return ""
}

func (x *NewSettingsRequest_PrefixForCurrentDay) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_PostfixForCurrentDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostfixForCurrentDay string `protobuf:"bytes,1,opt,name=postfix_for_current_day,json=postfixForCurrentDay,proto3" json:"postfix_for_current_day,omitempty"`
	ForceChoice          bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_PostfixForCurrentDay) Reset() {
	*x = NewSettingsRequest_PostfixForCurrentDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_PostfixForCurrentDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_PostfixForCurrentDay) ProtoMessage() {}

func (x *NewSettingsRequest_PostfixForCurrentDay) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_PostfixForCurrentDay.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_PostfixForCurrentDay) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 8}
}

func (x *NewSettingsRequest_PostfixForCurrentDay) GetPostfixForCurrentDay() string {
	if x != nil {
		return x.PostfixForCurrentDay
	}
	return ""
}

func (x *NewSettingsRequest_PostfixForCurrentDay) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_PrefixForNonSelectedDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixForNonSelectedDay string `protobuf:"bytes,1,opt,name=prefix_for_non_selected_day,json=prefixForNonSelectedDay,proto3" json:"prefix_for_non_selected_day,omitempty"`
	ForceChoice             bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_PrefixForNonSelectedDay) Reset() {
	*x = NewSettingsRequest_PrefixForNonSelectedDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_PrefixForNonSelectedDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_PrefixForNonSelectedDay) ProtoMessage() {}

func (x *NewSettingsRequest_PrefixForNonSelectedDay) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_PrefixForNonSelectedDay.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_PrefixForNonSelectedDay) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 9}
}

func (x *NewSettingsRequest_PrefixForNonSelectedDay) GetPrefixForNonSelectedDay() string {
	if x != nil {
		return x.PrefixForNonSelectedDay
	}
	return ""
}

func (x *NewSettingsRequest_PrefixForNonSelectedDay) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_PostfixForNonSelectedDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostfixForNonSelectedDay string `protobuf:"bytes,1,opt,name=postfix_for_non_selected_day,json=postfixForNonSelectedDay,proto3" json:"postfix_for_non_selected_day,omitempty"`
	ForceChoice              bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_PostfixForNonSelectedDay) Reset() {
	*x = NewSettingsRequest_PostfixForNonSelectedDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_PostfixForNonSelectedDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_PostfixForNonSelectedDay) ProtoMessage() {}

func (x *NewSettingsRequest_PostfixForNonSelectedDay) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_PostfixForNonSelectedDay.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_PostfixForNonSelectedDay) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 10}
}

func (x *NewSettingsRequest_PostfixForNonSelectedDay) GetPostfixForNonSelectedDay() string {
	if x != nil {
		return x.PostfixForNonSelectedDay
	}
	return ""
}

func (x *NewSettingsRequest_PostfixForNonSelectedDay) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_PrefixForPickDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixForPickDay string `protobuf:"bytes,1,opt,name=prefix_for_pick_day,json=prefixForPickDay,proto3" json:"prefix_for_pick_day,omitempty"`
	ForceChoice      bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_PrefixForPickDay) Reset() {
	*x = NewSettingsRequest_PrefixForPickDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_PrefixForPickDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_PrefixForPickDay) ProtoMessage() {}

func (x *NewSettingsRequest_PrefixForPickDay) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_PrefixForPickDay.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_PrefixForPickDay) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 11}
}

func (x *NewSettingsRequest_PrefixForPickDay) GetPrefixForPickDay() string {
	if x != nil {
		return x.PrefixForPickDay
	}
	return ""
}

func (x *NewSettingsRequest_PrefixForPickDay) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_PostfixForPickDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostfixForPickDay string `protobuf:"bytes,1,opt,name=postfix_for_pick_day,json=postfixForPickDay,proto3" json:"postfix_for_pick_day,omitempty"`
	ForceChoice       bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_PostfixForPickDay) Reset() {
	*x = NewSettingsRequest_PostfixForPickDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_PostfixForPickDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_PostfixForPickDay) ProtoMessage() {}

func (x *NewSettingsRequest_PostfixForPickDay) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_PostfixForPickDay.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_PostfixForPickDay) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 12}
}

func (x *NewSettingsRequest_PostfixForPickDay) GetPostfixForPickDay() string {
	if x != nil {
		return x.PostfixForPickDay
	}
	return ""
}

func (x *NewSettingsRequest_PostfixForPickDay) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_UnselectableDaysBeforeTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RFC3339.
	UnselectableDaysBeforeTime string `protobuf:"bytes,1,opt,name=unselectable_days_before_time,json=unselectableDaysBeforeTime,proto3" json:"unselectable_days_before_time,omitempty"`
	ForceChoice                bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_UnselectableDaysBeforeTime) Reset() {
	*x = NewSettingsRequest_UnselectableDaysBeforeTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_UnselectableDaysBeforeTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_UnselectableDaysBeforeTime) ProtoMessage() {}

func (x *NewSettingsRequest_UnselectableDaysBeforeTime) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_UnselectableDaysBeforeTime.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_UnselectableDaysBeforeTime) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 13}
}

func (x *NewSettingsRequest_UnselectableDaysBeforeTime) GetUnselectableDaysBeforeTime() string {
	if x != nil {
		return x.UnselectableDaysBeforeTime
	}
	return ""
}

func (x *NewSettingsRequest_UnselectableDaysBeforeTime) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_UnselectableDaysAfterTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RFC3339.
	UnselectableDaysAfterTime string `protobuf:"bytes,1,opt,name=unselectable_days_after_time,json=unselectableDaysAfterTime,proto3" json:"unselectable_days_after_time,omitempty"`
	ForceChoice               bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_UnselectableDaysAfterTime) Reset() {
	*x = NewSettingsRequest_UnselectableDaysAfterTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_UnselectableDaysAfterTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_UnselectableDaysAfterTime) ProtoMessage() {}

func (x *NewSettingsRequest_UnselectableDaysAfterTime) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_UnselectableDaysAfterTime.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_UnselectableDaysAfterTime) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 14}
}

func (x *NewSettingsRequest_UnselectableDaysAfterTime) GetUnselectableDaysAfterTime() string {
	if x != nil {
		return x.UnselectableDaysAfterTime
	}
	return ""
}

func (x *NewSettingsRequest_UnselectableDaysAfterTime) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_UnselectableDays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnselectableDays map[string]*emptypb.Empty `protobuf:"bytes,1,rep,name=unselectable_days,json=unselectableDays,proto3" json:"unselectable_days,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ForceChoice      bool                      `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_UnselectableDays) Reset() {
	*x = NewSettingsRequest_UnselectableDays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_UnselectableDays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_UnselectableDays) ProtoMessage() {}

func (x *NewSettingsRequest_UnselectableDays) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_UnselectableDays.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_UnselectableDays) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 15}
}

func (x *NewSettingsRequest_UnselectableDays) GetUnselectableDays() map[string]*emptypb.Empty {
	if x != nil {
		return x.UnselectableDays
	}
	return nil
}

func (x *NewSettingsRequest_UnselectableDays) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

type NewSettingsRequest_Timezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format IANA (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones column TZ identifier.
	// More information https://data.iana.org/time-zones/tz-link.html
	Timezone    string `protobuf:"bytes,1,opt,name=timezone,proto3" json:"timezone,omitempty"`
	ForceChoice bool   `protobuf:"varint,2,opt,name=force_choice,json=forceChoice,proto3" json:"force_choice,omitempty"`
}

func (x *NewSettingsRequest_Timezone) Reset() {
	*x = NewSettingsRequest_Timezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSettingsRequest_Timezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSettingsRequest_Timezone) ProtoMessage() {}

func (x *NewSettingsRequest_Timezone) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSettingsRequest_Timezone.ProtoReflect.Descriptor instead.
func (*NewSettingsRequest_Timezone) Descriptor() ([]byte, []int) {
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP(), []int{4, 16}
}

func (x *NewSettingsRequest_Timezone) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *NewSettingsRequest_Timezone) GetForceChoice() bool {
	if x != nil {
		return x.ForceChoice
	}
	return false
}

var File_telegram_calendar_examples_standalone_service_telegram_calendar_proto protoreflect.FileDescriptor

var file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDesc = []byte{
	0x0a, 0x45, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x9b, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x14, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x0c, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11,
	0x69, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x22, 0xb8, 0x02,
	0x0a, 0x14, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x62, 0x0a, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x6b, 0x0a, 0x11, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x12,
	0x56, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x1a, 0x4f, 0x0a, 0x14, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x07, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x79, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x79, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x79, 0x65, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x73, 0x75, 0x6d, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x75, 0x6d, 0x59,
	0x65, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x62, 0x65, 0x61, 0x75, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68,
	0x6f, 0x6d, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x42, 0x65, 0x61, 0x75,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x66,
	0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69,
	0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x3c,
	0x0a, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1c,
	0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x66,
	0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x1d,
	0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x69, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x1a, 0x5b, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x1c, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x15, 0x79,
	0x65, 0x61, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x52, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x18, 0x79, 0x65, 0x61, 0x72,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x52, 0x15, 0x79, 0x65, 0x61, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x08, 0x64, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x6e,
	0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x62, 0x65, 0x61, 0x75, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x42, 0x65, 0x61, 0x75, 0x74, 0x79, 0x52, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x42, 0x65, 0x61, 0x75, 0x74, 0x79, 0x12, 0x6e,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x71,
	0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x52, 0x14, 0x70, 0x6f, 0x73,
	0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x79, 0x12, 0x7b, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x79, 0x52, 0x17, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72,
	0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x7e,
	0x0a, 0x1c, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x79, 0x52, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72,
	0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x65,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b,
	0x44, 0x61, 0x79, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69,
	0x63, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x68, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x66,
	0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x52, 0x11, 0x70, 0x6f,
	0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x12,
	0x83, 0x01, 0x0a, 0x1d, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x1a, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1c, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x19, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x52, 0x10, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x4a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x1a, 0x6a, 0x0a, 0x12, 0x59, 0x65, 0x61,
	0x72, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x79, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x79, 0x65, 0x61, 0x72, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x73, 0x0a, 0x15, 0x59, 0x65, 0x61, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x79, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x79, 0x65, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x79, 0x0a, 0x08, 0x44, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x64, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x24, 0x0a, 0x07, 0x44, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x0a,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0x2a, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6d, 0x0a, 0x13, 0x48,
	0x6f, 0x6d, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x42, 0x65, 0x61, 0x75,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x65, 0x61, 0x75, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x42, 0x65, 0x61, 0x75, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x6d, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x79, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x70, 0x0a, 0x14, 0x50, 0x6f, 0x73,
	0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x7a, 0x0a, 0x17, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x7d, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x66,
	0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x6f, 0x73, 0x74, 0x66,
	0x69, 0x78, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x64, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46,
	0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x67, 0x0a, 0x11,
	0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44, 0x61,
	0x79, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x44,
	0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x6e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x7f, 0x0a, 0x19, 0x55, 0x6e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x8d, 0x02, 0x0a, 0x10,
	0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x79, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x79, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x5b,
	0x0a, 0x15, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x32, 0xf7, 0x02, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12,
	0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x71, 0x0a,
	0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x2d, 0x6e, 0x65, 0x77, 0x2d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x6a, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x68, 0x65, 0x76, 0x61, 0x6e, 0x34, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x2d, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x3b, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescOnce sync.Once
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescData = file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDesc
)

func file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescGZIP() []byte {
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescOnce.Do(func() {
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescData = protoimpl.X.CompressGZIP(file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescData)
	})
	return file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDescData
}

var file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_goTypes = []interface{}{
	(*GenerateCalendarRequest)(nil),                   // 0: telegram.calendar.GenerateCalendarRequest
	(*GenerateCalendarResponse)(nil),                  // 1: telegram.calendar.GenerateCalendarResponse
	(*InlineKeyboardMarkup)(nil),                      // 2: telegram.calendar.InlineKeyboardMarkup
	(*GetSettingsResponse)(nil),                       // 3: telegram.calendar.GetSettingsResponse
	(*NewSettingsRequest)(nil),                        // 4: telegram.calendar.NewSettingsRequest
	(*InlineKeyboardMarkup_InlineKeyboardRow)(nil),    // 5: telegram.calendar.InlineKeyboardMarkup.InlineKeyboardRow
	(*InlineKeyboardMarkup_InlineKeyboardButton)(nil), // 6: telegram.calendar.InlineKeyboardMarkup.InlineKeyboardButton
	nil, // 7: telegram.calendar.GetSettingsResponse.UnselectableDaysEntry
	(*NewSettingsRequest_YearsBackForChoose)(nil),         // 8: telegram.calendar.NewSettingsRequest.YearsBackForChoose
	(*NewSettingsRequest_YearsForwardForChoose)(nil),      // 9: telegram.calendar.NewSettingsRequest.YearsForwardForChoose
	(*NewSettingsRequest_DayNames)(nil),                   // 10: telegram.calendar.NewSettingsRequest.DayNames
	(*NewSettingsRequest_DayName)(nil),                    // 11: telegram.calendar.NewSettingsRequest.DayName
	(*NewSettingsRequest_MonthNames)(nil),                 // 12: telegram.calendar.NewSettingsRequest.MonthNames
	(*NewSettingsRequest_MonthName)(nil),                  // 13: telegram.calendar.NewSettingsRequest.MonthName
	(*NewSettingsRequest_HomeButtonForBeauty)(nil),        // 14: telegram.calendar.NewSettingsRequest.HomeButtonForBeauty
	(*NewSettingsRequest_PrefixForCurrentDay)(nil),        // 15: telegram.calendar.NewSettingsRequest.PrefixForCurrentDay
	(*NewSettingsRequest_PostfixForCurrentDay)(nil),       // 16: telegram.calendar.NewSettingsRequest.PostfixForCurrentDay
	(*NewSettingsRequest_PrefixForNonSelectedDay)(nil),    // 17: telegram.calendar.NewSettingsRequest.PrefixForNonSelectedDay
	(*NewSettingsRequest_PostfixForNonSelectedDay)(nil),   // 18: telegram.calendar.NewSettingsRequest.PostfixForNonSelectedDay
	(*NewSettingsRequest_PrefixForPickDay)(nil),           // 19: telegram.calendar.NewSettingsRequest.PrefixForPickDay
	(*NewSettingsRequest_PostfixForPickDay)(nil),          // 20: telegram.calendar.NewSettingsRequest.PostfixForPickDay
	(*NewSettingsRequest_UnselectableDaysBeforeTime)(nil), // 21: telegram.calendar.NewSettingsRequest.UnselectableDaysBeforeTime
	(*NewSettingsRequest_UnselectableDaysAfterTime)(nil),  // 22: telegram.calendar.NewSettingsRequest.UnselectableDaysAfterTime
	(*NewSettingsRequest_UnselectableDays)(nil),           // 23: telegram.calendar.NewSettingsRequest.UnselectableDays
	(*NewSettingsRequest_Timezone)(nil),                   // 24: telegram.calendar.NewSettingsRequest.Timezone
	nil,                                                   // 25: telegram.calendar.NewSettingsRequest.UnselectableDays.UnselectableDaysEntry
	(*timestamppb.Timestamp)(nil),                         // 26: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                 // 27: google.protobuf.Empty
}
var file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_depIdxs = []int32{
	2,  // 0: telegram.calendar.GenerateCalendarResponse.inline_keyboard_markup:type_name -> telegram.calendar.InlineKeyboardMarkup
	26, // 1: telegram.calendar.GenerateCalendarResponse.selected_day:type_name -> google.protobuf.Timestamp
	5,  // 2: telegram.calendar.InlineKeyboardMarkup.inline_keyboard:type_name -> telegram.calendar.InlineKeyboardMarkup.InlineKeyboardRow
	7,  // 3: telegram.calendar.GetSettingsResponse.unselectable_days:type_name -> telegram.calendar.GetSettingsResponse.UnselectableDaysEntry
	8,  // 4: telegram.calendar.NewSettingsRequest.years_back_for_choose:type_name -> telegram.calendar.NewSettingsRequest.YearsBackForChoose
	9,  // 5: telegram.calendar.NewSettingsRequest.years_forward_for_choose:type_name -> telegram.calendar.NewSettingsRequest.YearsForwardForChoose
	10, // 6: telegram.calendar.NewSettingsRequest.day_names:type_name -> telegram.calendar.NewSettingsRequest.DayNames
	12, // 7: telegram.calendar.NewSettingsRequest.month_names:type_name -> telegram.calendar.NewSettingsRequest.MonthNames
	14, // 8: telegram.calendar.NewSettingsRequest.home_button_for_beauty:type_name -> telegram.calendar.NewSettingsRequest.HomeButtonForBeauty
	15, // 9: telegram.calendar.NewSettingsRequest.prefix_for_current_day:type_name -> telegram.calendar.NewSettingsRequest.PrefixForCurrentDay
	16, // 10: telegram.calendar.NewSettingsRequest.postfix_for_current_day:type_name -> telegram.calendar.NewSettingsRequest.PostfixForCurrentDay
	17, // 11: telegram.calendar.NewSettingsRequest.prefix_for_non_selected_day:type_name -> telegram.calendar.NewSettingsRequest.PrefixForNonSelectedDay
	18, // 12: telegram.calendar.NewSettingsRequest.postfix_for_non_selected_day:type_name -> telegram.calendar.NewSettingsRequest.PostfixForNonSelectedDay
	19, // 13: telegram.calendar.NewSettingsRequest.prefix_for_pick_day:type_name -> telegram.calendar.NewSettingsRequest.PrefixForPickDay
	20, // 14: telegram.calendar.NewSettingsRequest.postfix_for_pick_day:type_name -> telegram.calendar.NewSettingsRequest.PostfixForPickDay
	21, // 15: telegram.calendar.NewSettingsRequest.unselectable_days_before_time:type_name -> telegram.calendar.NewSettingsRequest.UnselectableDaysBeforeTime
	22, // 16: telegram.calendar.NewSettingsRequest.unselectable_days_after_time:type_name -> telegram.calendar.NewSettingsRequest.UnselectableDaysAfterTime
	23, // 17: telegram.calendar.NewSettingsRequest.unselectable_days:type_name -> telegram.calendar.NewSettingsRequest.UnselectableDays
	24, // 18: telegram.calendar.NewSettingsRequest.timezone:type_name -> telegram.calendar.NewSettingsRequest.Timezone
	6,  // 19: telegram.calendar.InlineKeyboardMarkup.InlineKeyboardRow.buttons:type_name -> telegram.calendar.InlineKeyboardMarkup.InlineKeyboardButton
	27, // 20: telegram.calendar.GetSettingsResponse.UnselectableDaysEntry.value:type_name -> google.protobuf.Empty
	11, // 21: telegram.calendar.NewSettingsRequest.DayNames.day_names:type_name -> telegram.calendar.NewSettingsRequest.DayName
	13, // 22: telegram.calendar.NewSettingsRequest.MonthNames.month_names:type_name -> telegram.calendar.NewSettingsRequest.MonthName
	25, // 23: telegram.calendar.NewSettingsRequest.UnselectableDays.unselectable_days:type_name -> telegram.calendar.NewSettingsRequest.UnselectableDays.UnselectableDaysEntry
	27, // 24: telegram.calendar.NewSettingsRequest.UnselectableDays.UnselectableDaysEntry.value:type_name -> google.protobuf.Empty
	0,  // 25: telegram.calendar.CalendarService.GenerateCalendar:input_type -> telegram.calendar.GenerateCalendarRequest
	27, // 26: telegram.calendar.CalendarService.GetSettings:input_type -> google.protobuf.Empty
	4,  // 27: telegram.calendar.CalendarService.ApplyNewSettings:input_type -> telegram.calendar.NewSettingsRequest
	1,  // 28: telegram.calendar.CalendarService.GenerateCalendar:output_type -> telegram.calendar.GenerateCalendarResponse
	3,  // 29: telegram.calendar.CalendarService.GetSettings:output_type -> telegram.calendar.GetSettingsResponse
	27, // 30: telegram.calendar.CalendarService.ApplyNewSettings:output_type -> google.protobuf.Empty
	28, // [28:31] is the sub-list for method output_type
	25, // [25:28] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_init() }
func file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_init() {
	if File_telegram_calendar_examples_standalone_service_telegram_calendar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCalendarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCalendarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineKeyboardMarkup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineKeyboardMarkup_InlineKeyboardRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineKeyboardMarkup_InlineKeyboardButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_YearsBackForChoose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_YearsForwardForChoose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_DayNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_DayName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_MonthNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_MonthName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_HomeButtonForBeauty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_PrefixForCurrentDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_PostfixForCurrentDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_PrefixForNonSelectedDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_PostfixForNonSelectedDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_PrefixForPickDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_PostfixForPickDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_UnselectableDaysBeforeTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_UnselectableDaysAfterTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_UnselectableDays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSettingsRequest_Timezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_goTypes,
		DependencyIndexes: file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_depIdxs,
		MessageInfos:      file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_msgTypes,
	}.Build()
	File_telegram_calendar_examples_standalone_service_telegram_calendar_proto = out.File
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_rawDesc = nil
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_goTypes = nil
	file_telegram_calendar_examples_standalone_service_telegram_calendar_proto_depIdxs = nil
}
